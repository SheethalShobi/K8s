Helm is a package manager for Kubernetes.

Features:
1)Helm Charts
- Bundle of YAML files
- Create your own Helm charts with Helm
- Push the to Helm repository which can be public or private
- Download and use existing ones

Databases like MongoDB,monitoring apps like Prometheus etc have these helm charts installed on them 

2)Templating Engine / Config Values

suppose we have multiple microservices and deployment and service of each of those are pretty much the same with only difference in version tags like deplyment name,docker img etc then we need to write seperate yaml files for each of these so multiple deplyments where each one has its own appln name and version then with helm we can define a common blueprint for all the microservices
and the values that are dynamic ie gonna change are replaced by placeholders and that would be a template file where in syntax u have some values that gonna be taken original value of it from external configurations

Highly useful in ci/cd pipelines where those template files can be used and replace the values before deploying
Suppose we have an appl that needs to go for development,staging and production ,then instead of doing the task individually for each stage we can create helm charts with all necessary hem files that particular deployment needs and then redeploy them if diff communites cluster envs ,this makes deployment part easier

HELM CHART STRUCTURE

Directory structure 
mychart/  ( name of chart)
 Chart.yaml  (meta info abt chart like name,versions)
 values.yaml/ (place where all the values are configured for the template files and this would be the default values u can actually override later
 charts/  ( has chart dependencies)
 templates/ ( where template files are stored )
...

helm install <chartname> 
template files will be filled with the values from values.yaml file
Optionally other files like Readme or licence files are also present

How values are injected into template files ?
1. while giving command can specify like 
helm install --values=my-values.yaml <chartname>
then can create a my-values.yaml file and override one of those values or can add some new attributes and those will be merged and resolved into .values object

2. Using set flag command
helm install set version=2.0.0

3)Release Management
 Running instance of helm deployment
 this is based on its setup
 eg in helm version 2 and 3
 in 2,its comes as helm client and server known as Tiller 
whenever u run helm client,helm files will sent that to tiller that runs or has to run on k8 cluster
and tiller then execute this request and create components from this helm files inside the cluster and this feature of helm provides additional value mgmt which is release mgmt

the way helm client -server setup works is that whenever you create or change the deployment,tiller will store a copy of each configuration clients and for future refeences thus creating a history of chart executions so when u upgrade the helm deployment the changes will be applied to existing deployment instead of removing it and ceating a new one and instead if it the upgrade was wrong then we can rollback that upgrade using helm rollback <chartname>

Disadvantages
Tiller has too much power governance inside k8 cluster
Needs too much permissions and makes it a big security issue and thats y removed tiller part in version 3
